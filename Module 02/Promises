Module 2 - Promises

2.1 Intro to Promises

Promises are containers for values that are not yet available but may eventually become available
They are becoming the standard way to handle asynchronous functions in Javascript

Content
- How to create a Promise 
- How to get the result of a Promise 
- How to chain Promises together
- How to handle multiple Promises at the same time 


2.2 Creating and Using Promises

2.2.1 Creating Promises

var promise = new Promise(function(resolve, reject) {
    //do stuff

    var isSuccessful = true;

    if(isSuccessful) {
        resolve("Success");
    } else {
        reject(Error("Failure"));
    }
});

The new Promise() constructor is called to create a new promise.
It takes a callback function with the arguments resolve and reject

var promise = new Promise(function(resolve, reject) {

});

The resolve() function is used to change the status of the promise from pending to fulfilled.
The value that is passed inside the resolve() function becomes the fulfillment value of the promise.

Once the resolve() function is called, future resolve() and reject() calls no longer have any effect

The reject() function is used to change the status of the promise from pending to rejected.
The value that is passed inside the reject() function becomes the rejection value of the promise

Once the reject() function is called, future resolve() and reject() calls no longer have any effect 

Both of these methods can be called outside of the new Promise() constructor

var resolvedPromise = Promise.resolve("already resolved");
var rejectedPromise = Promise.reject(Error("alreadt rejected"));

If another promise is passed as an argument to reslove() then the new promise takes the fulfillment value of the passed in promise 

var firstPromise = Promise.reslove("resolved");
var secondPromise = Promise.resolve(firstPromise);

2.2.2 Using Promises 

The then() and catch() methods are used to handle the results of Promises once they have finished pending
then() is used to handle resolved Promises
catch() is used to handle rejected Promises

The callback functions should each have one argument representing the Promise result

var promise = new Promise(function(resolve, reject) {
    var isSuccessful = true;
    setTimeout(function() {
        if(isSuccessful) {
            resolve("success")
        } else {
            reject(Error("Failure))
        }
    }, 5000);
});

promise.then(function(val) {
    console.log(val);
}).catch(function(val) {
    console.log(val);
});

As an alternative to then() and catch() methods, then() can be called as it follows:

promise,then(function(val) {
    console.log(val)
}, function(val) {
    console.log(val);
})

Signature

then(onSuccess, onFailure)


2.3 Chaining Promises

2.3.1 Transforming Values

Promise results can be transformed by calling the return statement within the then() callback.
This will cause the then() method to return a new Promise with the transformed result.

var promise = Promise.resolve("hello");

var promise2 = promise.then(function(result)) {
    promise.then(function(result) {
        console.log(result);
        return result + " world";
    });

    promise2.then(function(result) {
        console.log(result);
    })
}

Chaining Transforms

Several transforms can be chained together using multiple then() method calls

var promise = Promise.resolve([1,2,3,4]);

promise.then(function(result) { 
    console.log(result) //logs [1,2,3,4] 
    return result.map(x => x * x); //squares each value in the array

}).then(function(result2){
    console.log(result2) //logs [1,4,9,16]
    return result2.filter( x => x > 10); //filters out elements that are not larger than 10

}).then(function(result3){
    console.log(result3) //logs [16]
    return result3.toString() + "!!"; //converts result3 to a string and adds "!!"

}).then(function(result4){
    console.log(result4) //logs "16!!"
    return result4;  //returns a promise with "16!!" as the fulfillment value

}).catch(function(error){
    console.log(error)
});

2.3.2 Sequencing Asynchronous Operations

Returning another Promise within a then() callback will cause the then() method to return the returned Promise.

var promise = Promise.resolve("hello");

var promise2 = promise.then(function(result) {
    console.log(result);
    return Promise.resolve("12345");
});

promise2.then(function(result) {
    console.log(result);
});

Asynchronous operations can be squenced by returning Promises within then() callbacks

//getRandomNumber() returns a promise containing a random number
getRandomNumber().then(function(result) {  
    console.log(result) // 42
    return getNameFromNumber(result); //returns a promise containing a string representing a name

}).then(function(result2){
    console.log(result2) //"Bob"
    return getAgeFromName(result2);  //returns a promise containing a number representing an age

}).then(function(result3){
    console.log(result3) //21

}.catch(function(error){
    console.log(error)
});

2.3.3 Promises Chaining vs Callback Pyramids

Chaining Promises vs Continuation Passing Style(CPS)

Chaining Asynchronous Operations using the Continuation Passing Style:

getRandomNumber(function(number)){
    console.log(number); //logs 42

    getNameFromNumber(number, function(name)){
        console.log(name) //logs 'Bob'

        getAgefromNumber(age, function(age)){
            console.log(age) //logs 21
            //do something with age

        },
        function(error){
            console.log(error);
        }
    }, 
    function(error){
        console.log(error);
    }
},function(error){
    console.log(error);
});

Chaining Asynchronous Operations using Promises:

//getRandomNumber() returns a promise containing a random number
getRandomNumber().then(function(result) {  
    console.log(result) // 42
    return getNameFromNumber(result); //returns a promise containing a string representing a name

}).then(function(result2){
    console.log(result2) //"Bob"
    return getAgeFromName(result2);  //returns a promise containing a number representing an age

}).then(function(result3){
    console.log(result3) //21

}.catch(function(error){
    console.log(error)
});


2.4 Handling Multiple Promises 

2.4.1 Promise.all()

The Promise.all() method is used to process multiple promises at the same time.
The method takes in an array of promises and then waits for them to all resolve.
If any of the promises reject, then the Promise.all() will return the first rejected promise.

var promise1 = Promise.resolve('hello');
var promise2 = Promise.resolve({age:2, height:188});
var promise3 = 42;

Promise.all([promise1, promise2, promise3]).then(function(result) {
    console.log(result);
}).catch(function(error) {
    console.log(error);
})

2.4.2 Promise.race()

The Promise.race() method takes in an array of promises and takes the result of the promise that rejects
or resolves the fastest.
It can be used to choose the quickest source when there are two similar sources of the same data.

var promise1 = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve("finished in two seconds");
    }, 2000)
})

var promise2 = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve("finished in five seconds");
    }, 5000)
});

Promise.race([promise1, promise2]).then(function(result) {
    console.log(result);
}).catch(function(error) {
    console.log(error);
});